<!DOCTYPE html>
<html lang="en">

<head>
  <title>Courses</title>
  <%- include('../../components/head'); %>
  <script src="/js/sse.js" async></script>
  <script src="https://www.kryogenix.org/code/browser/sorttable/sorttable.js" async></script>
</head>

<body>
  <label for="term">View classes for term:</label>
  <select id="term" autocomplete="off" onchange="updateSubjects(); fetchClasses()">
    <option disabled selected value> -- select -- </option>
    <% for (const term of terms) { %>
    <option value="<%= term %>"><%= term %></option>
    <% } %>
  </select>
  <select id="subject" autocomplete="off" onchange="updateClasses()">
    <option value="ALL">ALL</option>
  </select>
  <input type="text" id="number" name="number" oninput="updateClasses()" />
  <div id="output">
    <table style="display: none;" class="sortable">
      <thead>
        <tr>
          <th>Class ID</th>
          <th>Title</th>
          <th>Show Sections</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
  <dialog id="courseInfo">
    <h1 id="classID">CLASS ID</h1>
    <h1 id="className">CLASS NAME</h1>
    <h2 id="classDescription">DESCRIPTION</h2>
    <table class="sortable">
      <thead>
        <tr>
          <th>Class #</th>
          <th>Section</th>
          <th>Seats Open</th>
          <th>Campus</th>
          <th>Day(s) & Location(s)</th>
          <th>Instructor(s)</th>
          <th>RMP</th>
          <th>Credits</th>
          <th>Component</th>
          <th>Waitlist Open</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </dialog>
</body>

<script type="text/javascript">
  instructors = []
  promises = []
  instructorsData = new Map()
  updateSubjects()

  function removeOptions(selectElement) {
    var i, L = selectElement.options.length - 1;
    for (i = L; i > 0; i--) {
      selectElement.remove(i);
    }
  }

  function updateSubjects() {
    removeOptions(document.getElementById('subject'))
    const subjects = <%- JSON.stringify(subjects) %>
    const terms = <%- JSON.stringify(terms) %>
    subjects[terms.indexOf(document.getElementById('term').value)].forEach((subject) => {
      let opt = document.createElement('option')
      opt.value = subject
      opt.innerText = subject
      document.getElementById('subject').appendChild(opt)
    })
  }

  async function fetchClasses() {
    const term = document.getElementById('term').value
    const subject = document.getElementById('subject').value
    const output = document.getElementById('output')
    try {
      let fetchURL = `/api/terms/${term}/`
      if (subject == 'ALL') {
        fetchURL += 'courses'
      } else {
        fetchURL += `subjects/${subject}/courses`
      }
      const response = await fetch(fetchURL)
      const classes = await response.json()
      if (classes.length === 0) {
        throw Error(`Returned empty array for classes in term ${term}`)
      }
      const tbody = document.querySelector('#output tbody')
      tbody.innerHTML = ''
      classes.forEach((c) => {
        const tr = document.createElement('tr')
        const td1 = document.createElement('td')
        const td2 = document.createElement('td')
        const td3 = document.createElement('td')
        const courseButton = document.createElement('button')
        const id = c['id'].replace('|', ' ')
        const title = c['title']
        courseButton.innerText = "View Course"
        courseButton.onclick = function() {
          courseDetails(id, title, c['description'])
        }
        td1.textContent = id
        td2.textContent = title
        td3.appendChild(courseButton)
        tr.appendChild(td1)
        tr.appendChild(td2)
        tr.appendChild(td3)
        tbody.appendChild(tr)
      })
    } catch (err) {
      output.textContent = `Unable to fetch classes for ${term}, sorry`
      console.error(err)
    }
    document.querySelector('#output table').style.display = 'block'
  }

  function updateClasses() {
    const tbody = document.querySelector('#output tbody')
    const subject = document.getElementById('subject').value
    const number = document.getElementById('number').value
    let match = ''
    if (subject == 'ALL') {
      match = number
    } else {
      match = subject + ' ' + number
    }
    for (child of tbody.children) {
      if (child.firstChild.innerText.match(match)) {
        child.hidden = false
      } else {
        child.hidden = true
      }
    }
  }

  function rmpParse(instructorData) {
    // Declare DOM elements
    const div = document.createElement('div')
    div.classList.add('rmpBox')
    const imgBox = document.createElement('div')
    const img = document.createElement('img')
    const amtBox = document.createElement('div')
    const rateBox = document.createElement('div')
    const diffBox = document.createElement('div')
    const wtaBox = document.createElement('div')

    // Add RMP logo
    img.src = 'https://www.ratemyprofessors.com/favicons/favicon-32.png'
    img.alt = 'RMP logo'
    imgBox.appendChild(img)
    imgBox.classList.add('imgBox')
    div.appendChild(imgBox)

    // Add amount of reviews box
    amtBox.textContent = instructorData['numRatings']
    amtBox.classList.add('amtBox')
    div.appendChild(amtBox)

    // Add average rating box
    rateBox.textContent = instructorData['avgRating']
    rateBox.classList.add('rateBox')
    div.appendChild(rateBox)

    // Add average difficulty box
    diffBox.textContent = instructorData['avgDifficulty']
    diffBox.classList.add('diffBox')
    div.appendChild(diffBox)

    // Add would take again percent box
    wtaBox.textContent = instructorData['wouldTakeAgainPercent']
    wtaBox.classList.add('wtaBox')
    div.appendChild(wtaBox)

    return div
  }

  // Fetch the instructor's data
  async function rmpFetch(instructor) {
    //TODO: Mangle name to attempt to get better result
    //TODO: FIX this handling of bad requests
    // Request RMP data from the proxy server endpoint
    const response = await fetch(`/rmp?name=${instructor}`)

    // Error handle a bad response
    if (response.status != 200) {
      zeroData = {
        numRatings: 0,
        avgDifficulty: 0,
        avgRating: 0,
        wouldTakeAgainPercent: 0
      }
      return rmpParse(zeroData)
    }

    // Parse and return JSON as div to promises array
    const jsonResponse = await response.json()
    return rmpParse(jsonResponse)
  }

  // Check if instructor already requested, if not send out a fetch promise
  function rmpCache(instructor) {
    if (!instructors.includes(instructor)) {
      instructors.push(instructor)
      promises.push(rmpFetch(instructor))
    }
  }

  async function courseDetails(id, title, description) {
    try {
      document.getElementById('classID').innerText = id
      document.getElementById('className').innerText = title
      document.getElementById('classDescription').innerText = description
      const term = document.getElementById('term').value
      const subject = id.split(" ")[0]
      const number = id.split(" ")[1]
      const response = await fetch(`/api/terms/${term}/subjects/${subject}/courses/${number}/regblocks`)
      const jsonResponse = await response.json()
      const sections = jsonResponse['sections']
      const tbody = document.querySelector('#courseInfo tbody')
      tbody.innerHTML = ''
      sections.forEach((s) => {
        const tr = document.createElement('tr')
        const td1 = document.createElement('td')
        const td2 = document.createElement('td')
        const td3 = document.createElement('td')
        const td4 = document.createElement('td')
        const td5 = document.createElement('td')
        const td6 = document.createElement('td')
        const td7 = document.createElement('td')
        const td8 = document.createElement('td')
        const td9 = document.createElement('td')
        const td10 = document.createElement('td')

        td1.textContent = s['id']
        td2.textContent = s['sectionNumber']
        td3.textContent = s['openSeats']
        td4.textContent = s['location']
        if (s['location'] == 'Distance Delivery') {
          td5.textContent = 'ONLINE'
        } else {
          s['meetings'].forEach((m) => {
            td5.textContent += `${m['days']} - ${m['startTime']}-${m['endTime']} at ${m['location']}\n`
          })
        }
        s['instructor'].forEach((i) => {
          td6.textContent += `${i['name']}\n`
          rmpCache(i['name'])
        })
        td8.textContent = s['credits']
        td9.textContent = s['component']
        td10.textContent = s['waitlistOpen']

        tr.appendChild(td1)
        tr.appendChild(td2)
        tr.appendChild(td3)
        tr.appendChild(td4)
        tr.appendChild(td5)
        tr.appendChild(td6)
        tr.appendChild(td7)
        tr.appendChild(td8)
        tr.appendChild(td9)
        tr.appendChild(td10)

        tbody.appendChild(tr)
      })
      document.getElementById('courseInfo').showModal()

      const responses = await Promise.all(promises)

      // Add instructors and their data into a map
      for (let i = 0; i < instructors.length; i++) {
        instructorsData.set(instructors[i], responses[i])
      }

      // Add RMP data to the table based on the instructor name
      Array.from(tbody.children).forEach((tr) => {
        const instructorCol = tr.children[6 - 1]
        const rmpCol = tr.children[7 - 1]
        const tableInstructors = instructorCol.textContent.split('\n')
        // Remove the trailing empty string
        tableInstructors.pop()
        tableInstructors.forEach((i) => {
          rmpCol.appendChild(instructorsData.get(i).cloneNode(true))
        })
      })

    } catch (err) {
      document.getElementById('classDescription').textContent = `Unable to get sections for ${id}, sorry`
      console.error(err)
    }
  }
</script>

</html>